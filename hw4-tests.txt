#use "hw4-code.ml";;

Question 1a
	let positive = predicate_opt (fun x -> x >= 0);;
	val positive : int -> int option = <fun>

	positive 0;;
	- : int option = Some 0

	positive 10;;
	- : int option = Some 10

	positive (-1);;
	- : int option = None

	positive (-10);;
	- : int option = None

	let nonempty = predicate_opt (fun x -> match x with [] -> false | _
	-> true);;
	val nonempty : ’_a list -> ’_a list option = <fun>

	nonempty [1;2;3;4];;
	- : int list option = Some [1; 2; 3; 4]

	nonempty [];;
	- : int list option = None

	nonempty [3];;
	- : int list option = Some [3]

	nonempty [3;4];;
	- : int list option = Some [3; 4]

Question 1b
	let square = map_opt (fun x -> x * x);;
	val square : int option -> int option = <fun>

	square None;;
	- : int option = None
	
	square (Some 10);;
	- : int option = Some 100
	
	square (Some 5);;
	- : int option = Some 25
	
	let add_copy = map_opt (fun x -> x ^ " (copy)");;
	val add_copy : string option -> string option = <fun>
	
	add_copy None;;
	- : string option = None

	add_copy (Some "hello");;
	- : string option = Some "hello (copy)"
		
	add_copy (Some "test");;
	- : string option = Some "test (copy)"

Question 1c
	let add = comb_opt (fun x y -> x + y);;
	val add : int option -> int option -> int option = <fun>
	
	add None None;;
	- : int option = None
	
	add None (Some 10);;
	- : int option = None
	
	add (Some 10) (Some 20);;
	- : int option = Some 30
	
	add (Some 99) (Some 1);;
	- : int option = Some 100
	
	let conc = comb_opt (fun x y -> x^" - "^y);;
	val conc : string option -> string option -> string option = <fun>
	
	conc None None;;
	- : string option = None
	
	conc None (Some "world");;
	- : string option = None
	
	conc (Some "hello") (Some "world");;
	- : string option = Some "hello - world

Question 1d
	default 0 None;;
	- : int = 0
	
	default 0 (Some 10);;
	- : int = 10
	
	default 0 (Some (-10));;
	- : int = -10
	
	default 0 (positive 100);;
	- : int = 100
	
	default 0 (positive (-1));;
	- : int = 0
	
	default 0 (positive (-100));;
	- : int = 0
	
	default "no-string" None;;
	- : string = "no-string"
	
	default "no-string" (Some "hello");;
	- : string = "hello"

Question 1e
	let rec last l =
		match l with
		[] -> None
		| [x] -> Some(x)
		| x::xs -> last(xs);;
	val last : ’a list -> ’a option = <fun>
	
	let positive_last = compose_opt last positive;;
	val positive_last : int list -> int option = <fun>
	
	positive_last [];;
	- : int option = None
	
	positive_last [1;2;3;4];;
	- : int option = Some 4
	
	positive_last [1;-2;3;-4];;
	- : int option = None


Question 2a
	at_least 0 (fun x -> x) [];;
	- : bool = true
	
	at_least 1 (fun x -> x) [];;
	- : bool = false
	
	at_least 0 (fun x -> x) [true; true; false];;
	- : bool = true
	
	at_least 1 (fun x -> x > 0) [2; 3; 0];;
	- : bool = true
	
	at_least 2 (fun x -> x > 0) [2; 3; 0];;
	- : bool = true
	
	at_least 3 (fun x -> x > 0) [2; 3; 0];;
	- : bool = false

Question 2b
	max_list [];;
	- : ’a option = None
	
	max_list [4];;
	- : int option = Some 4
	
	max_list [4; 5];;
	- : int option = Some 5
	
	max_list [5; 4];;
	- : int option = Some 5
	
	max_list [6; 4];;
	- : int option = Some 6
	
	max_list [4; 8; 6; 3; 8; 7; 3];;
	- : int option = Some 8		

Question 2c
	let dbl x = "double of "^(string_of_int x);;
	val dbl : int -> string = <fun>
	
	let neg x = "negative of "^(string_of_int x);;
	val neg : int -> string = <fun>
	
	map_funs [] 3;;
	- : ’a list = []
	
	map_funs [dbl] 3;;
	- : string list = ["double of 3"]
	
	map_funs [dbl; neg] 3;;
	- : string list = ["double of 3"; "negative of 3"]
	
	map_funs [dbl; neg; dbl] 3;;
	- : string list = ["double of 3"; "negative of 3"; "double of 3"]	

Question 2d
	
	let dbl x = "double of "^(string_of_int x);;
	val dbl : int -> string = <fun>
	
	let neg x = "negative of "^(string_of_int x);;
	val neg : int -> string = <fun>
	
	map_cross [] [];;
	- : ’a list = []
	
	map_cross [] [1;2;3];;
	- : ’a list = []
	
	map_cross [dbl; neg] [];;
	- : string list = []
	
	map_cross [dbl] [3];;
	6- : string list = ["double of 3"]
	
	map_cross [dbl] [1;2;3];;
	- : string list = ["double of 1"; "double of 2"; "double of 3"]
	
	map_cross [dbl; neg] [3];;
	- : string list = ["double of 3"; "negative of 3"]
	
	map_cross [dbl; neg] [1; 2; 3];;
	- : string list =
	["double of 1"; "negative of 1"; "double of 2"; "negative of 2";
	"double of 3"; "negative of 3"]
							
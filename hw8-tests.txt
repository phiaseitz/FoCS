#use "hw8-code.ml";;

1a
	let delta x = match x with
		| (1,"a") -> (2,"b",Right)
		| (1,"b") -> (2,"b",Left)
		| (2,"a") -> (1,"a",Right)
		| (2,"b") -> (2,"b",Left)
		| (3,sym) -> (3,sym,Right)
		| (_,sym) -> (3,sym,Right);;
	val delta : int * string -> int * string * direction = <fun>
	
	make_delta [1;2;3] ["a";"b"] delta;;
	- : (int * string * int * string * direction) list =
	[(1, "a", 2, "b", Right); (2, "a", 1, "a", Right); (3, "a", 3, "a",
	Right);
	(1, "b", 2, "b", Left); (2, "b", 2, "b", Left); (3, "b", 3, "b",
	Right)]
	
	make_delta [] [] delta;;
	- : (int * string * int * string * direction) list = []
	
	make_delta [] ["a"] delta;;
	- : (int * string * int * string * direction) list = []
	
	make_delta [1;3;5] ["a";"b"] delta;;
	- : (int * string * int * string * direction) list =
	[(1, "a", 2, "b", Right); (3, "a", 3, "a", Right); (5, "a", 3, "a",
	Right);
	(1, "b", 2, "b", Left); (3, "b", 3, "b", Right); (5, "b", 3, "b",
	Right)]

1b
	let f x = match x with 0 -> "zero" | 1 -> "one" | 2 -> "two" | _ ->
	"other";;
	val f : int -> string = <fun>
	
	transform_states f [];;
	- : string list = []
	
	transform_states f [1;2];;
	- : string list = ["one"; "two"]
	
	transform_states f [1;2;3];;
	- : string list = ["one"; "two"; "other"]
	
	type even_odd_sequence_state =
	| Simple of string
	| BitTag of string * string;;
	type even_odd_sequence_state = Simple of string | BitTag of string *
	string
	
	let string_of st =
	match st with
	| Simple(s) -> s
	| BitTag(s,b) -> s^"|"^b;;
	val string_of : even_odd_sequence_state -> string = <fun>
	
	transform_states string_of [Simple("hello");Simple("world");BitTag
	("one","1");BitTag("two","0")];;
	- : string list = ["hello"; "world"; "one|1"; "two|0"]
1c
	let f x = match x with 0 -> "zero" | 1 -> "one" | 2 -> "two" | _ ->
	"other";;
	val f : int -> string = <fun>
	
	transform_delta f [];;
	- : (string * ’a * string * ’b * ’c) list = []
	
	transform_delta f [(0,"a",1,"b",Right)];;
	- : (string * string * string * string * direction) list =
	[("zero", "a", "one", "b", Right)]
	
	transform_delta f [(0,"a",1,"b",Right);(2,"b",0,"c",Left)];;
	- : (string * string * string * string * direction) list =
	[("zero", "a", "one", "b", Right); ("two", "b", "zero", "c", Left)]

1d
	let f x = match x with 0 -> "zero" | 1 -> "one" | 2 -> "two" | _ ->
	"other";;
	val f : int -> string = <fun>
	
	transform f { tm_states = [0;1;2];
	tm_input_alph = ["a";"b"];
	tm_tape_alph = ["a";"b";">";"_"];
	tm_blank = "_";
	tm_leftmost = ">";
	tm_delta = [(0,"a",1,"b",Right); (2,"b",0,"c",Left)];
	tm_start = 0;
	tm_accept = 1;
	tm_reject = 2};;
	- : string tm =
	{tm_states = ["zero"; "one"; "two"]; tm_input_alph = ["a"; "b"];
	tm_tape_alph = ["a"; "b"; ">"; "_"]; tm_leftmost = ">"; tm_blank = "
	_";
	tm_delta =
	[("zero", "a", "one", "b", Right); ("two", "b", "zero", "c", Left)
	];
	tm_start = "zero"; tm_accept = "one"; tm_reject = "two"}

#use "hw9-code.ml";;

1a
	list 10 (scale 2 nats);;
	- : int list = [0; 2; 4; 6; 8; 10; 12; 14; 16; 18]
	
	list 10 (scale 3 evens);;
	- : int list = [0; 6; 12; 18; 24; 30; 36; 42; 48; 54]
	
	list 10 (scale 4 squares);;
	- : int list = [0; 4; 16; 36; 64; 100; 144; 196; 256; 324]
	
	list 10 (scale 0 odds);;
	- : int list = [0; 0; 0; 0; 0; 0; 0; 0; 0; 0]

1b
	list 10 (zip nats nats);;
	- : (int * int) list =
	[(0, 0); (1, 1); (2, 2); (3, 3); (4, 4); (5, 5); (6, 6); (7, 7); (8,
	8);
	(9, 9)]
	
	list 10 (zip nats (tail nats));;
	- : (int * int) list =
	[(0, 1); (1, 2); (2, 3); (3, 4); (4, 5); (5, 6); (6, 7); (7, 8); (8,
	9);
	(9, 10)]
	
	list 10 (zip nats evens);;
	- : (int * int) list =
	[(0, 0); (1, 2); (2, 4); (3, 6); (4, 8); (5, 10); (6, 12); (7, 14);
	(8, 16);
	(9, 18)]
	
	list 10 (zip nats squares);;
	- : (int * int) list =
	[(0, 0); (1, 1); (2, 4); (3, 9); (4, 16); (5, 25); (6, 36); (7, 49);
	(8, 64); (9, 81)]
	
	list 10 (zip squares (map (fun x -> "foo"^(string_of_int x)) nats))
	;;
	- : (int * string) list =
	[(0, "foo0"); (1, "foo1"); (4, "foo2"); (9, "foo3"); (16, "foo4");
	(25, "foo5"); (36, "foo6"); (49, "foo7"); (64, "foo8"); (81, "foo9")
	]

1c
	list 10 (add nats nats);;
	- : int list = [0; 2; 4; 6; 8; 10; 12; 14; 16; 18]
	
	list 10 (add nats (const 1));;
	- : int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]
	
	list 10 (add nats (const 10));;
	- : int list = [10; 11; 12; 13; 14; 15; 16; 17; 18; 19]
	
	list 10 (add evens squares);;
	- : int list = [0; 3; 8; 15; 24; 35; 48; 63; 80; 99]

1d
	list 10 (merge nats nats);;
	- : int list = [0; 0; 1; 1; 2; 2; 3; 3; 4; 4]
	
	list 10 (merge nats evens);;
	- : int list = [0; 0; 1; 2; 2; 4; 3; 6; 4; 8]
	
	list 10 (merge evens odds);;
	- : int list = [0; 1; 2; 3; 4; 5; 6; 7; 8; 9]
	
	list 10 (merge odds evens);;
	- : int list = [1; 0; 3; 2; 5; 4; 7; 6; 9; 8]

1e
	list 10 (psums nats);;
	- : int list = [0; 1; 3; 6; 10; 15; 21; 28; 36; 45]
	
	list 10 (psums squares);;
	- : int list = [0; 1; 5; 14; 30; 55; 91; 140; 204; 285]
	
	list 10 (psums evens);;
	- : int list = [0; 2; 6; 12; 20; 30; 42; 56; 72; 90]
	
	list 10 (psums odds);;
	- : int list = [1; 4; 9; 16; 25; 36; 49; 64; 81; 100]

1f
	list 10 (running_max nats);;
	- : int list = [0; 1; 2; 3; 4; 5; 6; 7; 8; 9]
	
	let rec alt () = fby (-1) (fun () -> fby 0 (fun () -> fby 1 alt));;
	val alt : unit -> int stream = <fun>
	
	list 10 (running_max (add nats (alt ())));;
	- : int list = [-1; 1; 3; 3; 4; 6; 6; 7; 9; 9]
	
	list 10 (running_max (add evens (alt ())));;
	- : int list = [-1; 2; 5; 5; 8; 11; 11; 14; 17; 17]
	
	let negodd s = map (fun x -> if (x mod 2 > 0) then (-x) else x) s;;
	val negodd : int stream -> int stream = <fun>
	
	list 10 (running_max (negodd nats));;
	- : int list = [0; 0; 2; 2; 4; 4; 6; 6; 8; 8]
	
	list 10 (running_max (add (negodd nats) (alt ())));;
	- : int list = [-1; -1; 3; 3; 4; 4; 5; 5; 9; 9]


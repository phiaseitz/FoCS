#use "hw9-code.ml";;

1a
	list 10 (scale 2 nats);;
	- : int list = [0; 2; 4; 6; 8; 10; 12; 14; 16; 18]
	
	list 10 (scale 3 evens);;
	- : int list = [0; 6; 12; 18; 24; 30; 36; 42; 48; 54]
	
	list 10 (scale 4 squares);;
	- : int list = [0; 4; 16; 36; 64; 100; 144; 196; 256; 324]
	
	list 10 (scale 0 odds);;
	- : int list = [0; 0; 0; 0; 0; 0; 0; 0; 0; 0]

1b
	list 10 (zip nats nats);;
	- : (int * int) list =
	[(0, 0); (1, 1); (2, 2); (3, 3); (4, 4); (5, 5); (6, 6); (7, 7); (8,
	8);
	(9, 9)]
	
	list 10 (zip nats (tail nats));;
	- : (int * int) list =
	[(0, 1); (1, 2); (2, 3); (3, 4); (4, 5); (5, 6); (6, 7); (7, 8); (8,
	9);
	(9, 10)]
	
	list 10 (zip nats evens);;
	- : (int * int) list =
	[(0, 0); (1, 2); (2, 4); (3, 6); (4, 8); (5, 10); (6, 12); (7, 14);
	(8, 16);
	(9, 18)]
	
	list 10 (zip nats squares);;
	- : (int * int) list =
	[(0, 0); (1, 1); (2, 4); (3, 9); (4, 16); (5, 25); (6, 36); (7, 49);
	(8, 64); (9, 81)]
	
	list 10 (zip squares (map (fun x -> "foo"^(string_of_int x)) nats))
	;;
	- : (int * string) list =
	[(0, "foo0"); (1, "foo1"); (4, "foo2"); (9, "foo3"); (16, "foo4");
	(25, "foo5"); (36, "foo6"); (49, "foo7"); (64, "foo8"); (81, "foo9")
	]

1c
	list 10 (add nats nats);;
	- : int list = [0; 2; 4; 6; 8; 10; 12; 14; 16; 18]
	
	list 10 (add nats (const 1));;
	- : int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]
	
	list 10 (add nats (const 10));;
	- : int list = [10; 11; 12; 13; 14; 15; 16; 17; 18; 19]
	
	list 10 (add evens squares);;
	- : int list = [0; 3; 8; 15; 24; 35; 48; 63; 80; 99]

1d
	list 10 (merge nats nats);;
	- : int list = [0; 0; 1; 1; 2; 2; 3; 3; 4; 4]
	
	list 10 (merge nats evens);;
	- : int list = [0; 0; 1; 2; 2; 4; 3; 6; 4; 8]
	
	list 10 (merge evens odds);;
	- : int list = [0; 1; 2; 3; 4; 5; 6; 7; 8; 9]
	
	list 10 (merge odds evens);;
	- : int list = [1; 0; 3; 2; 5; 4; 7; 6; 9; 8]

1e
	list 10 (psums nats);;
	- : int list = [0; 1; 3; 6; 10; 15; 21; 28; 36; 45]
	
	list 10 (psums squares);;
	- : int list = [0; 1; 5; 14; 30; 55; 91; 140; 204; 285]
	
	list 10 (psums evens);;
	- : int list = [0; 2; 6; 12; 20; 30; 42; 56; 72; 90]
	
	list 10 (psums odds);;
	- : int list = [1; 4; 9; 16; 25; 36; 49; 64; 81; 100]

1f
	list 10 (running_max nats);;
	- : int list = [0; 1; 2; 3; 4; 5; 6; 7; 8; 9]
	
	let rec alt () = fby (-1) (fun () -> fby 0 (fun () -> fby 1 alt));;
	val alt : unit -> int stream = <fun>
	
	list 10 (running_max (add nats (alt ())));;
	- : int list = [-1; 1; 3; 3; 4; 6; 6; 7; 9; 9]
	
	list 10 (running_max (add evens (alt ())));;
	- : int list = [-1; 2; 5; 5; 8; 11; 11; 14; 17; 17]
	
	let negodd s = map (fun x -> if (x mod 2 > 0) then (-x) else x) s;;
	val negodd : int stream -> int stream = <fun>
	
	list 10 (running_max (negodd nats));;
	- : int list = [0; 0; 2; 2; 4; 4; 6; 6; 8; 8]
	
	list 10 (running_max (add (negodd nats) (alt ())));;
	- : int list = [-1; -1; 3; 3; 4; 4; 5; 5; 9; 9]

2a
	list 10 (arctan 0.0);;
	- : float list = [0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.]
	
	list 10 (arctan 1.0);;
	- : float list =
	[1.; 0.666666666666666741; 0.866666666666666696;
	0.723809523809523903;
	0.834920634920635063; 0.744011544011544124; 0.820934620934621107;
	0.754267954267954455; 0.813091483679719174; 0.760459904732350811]
	
	list 10 (arctan 0.5);;
	- : float list =
	[0.5; 0.458333333333333315; 0.464583333333333293;
	0.46346726190476184;
	0.463684275793650735; 0.463639886589105266; 0.463649276613143702;
	0.463647242107935342; 0.463647690895848952; 0.463647590509078777]
	
	list 10 (scalef 4.0 (arctan 1.0));;
	- : float list =
	[4.; 2.66666666666666696; 3.46666666666666679; 2.89523809523809561;
	3.33968253968254025; 2.97604617604617649; 3.28373848373848443;
	3.01707181707181782; 3.25236593471887669; 3.04183961892940324]
	
	nth 1000 (scalef 4.0 (arctan 1.0));;
	- : float = 3.14259165433954424

2a
	list 10 (pi ());;
	- : float list =
	7
	[3.18326359832636; 3.14059702932606033; 3.14162102932503462;
	3.14159177218217733; 3.14159268240439937; 3.14159265261530862;
	3.141592653623555; 3.14159265358860251; 3.14159265358983619;
	3.14159265358979223]
	
	nth 100 (pi ());;
	- : float = 3.141592653589794

2b
	list 10 (newton (fun x -> 3.0 *. x -. 2.0) (fun x -> 3.0) 1.0);;
	- : float list =
	[1.; 0.666666666666666741; 0.666666666666666741;
	0.666666666666666741;
	0.666666666666666741; 0.666666666666666741; 0.666666666666666741;
	0.666666666666666741; 0.666666666666666741; 0.666666666666666741]
	
	let sqrt v = newton (fun x -> x *. x -. v) (fun x -> 2.0 *. x)
	1.0;;
	val sqrt : float -> float stream = <fun>
	
	list 10 (sqrt 4.0);;
	- : float list =
	[1.; 2.5; 2.05; 2.00060975609756087; 2.00000009292229475;
	2.00000000000000222; 2.; 2.; 2.; 2.]
	
	list 10 (sqrt 5.0);;
	- : float list =
	[1.; 3.; 2.33333333333333348; 2.23809523809523814;
	2.23606889564336342;
	2.2360679774999781; 2.23606797749979; 2.23606797749979;
	2.23606797749979;
	2.23606797749979]
	
	list 10 (sqrt 6.0);;
	- : float list =
	[1.; 3.5; 2.60714285714285721; 2.45425636007827785;
	2.44949437160696526;
	2.44948974278755172; 2.44948974278317788; 2.44948974278317788;
	2.44948974278317788; 2.44948974278317788]
	
	list 10 (sqrt 25.0);;
	- : float list =
	[1.; 13.; 7.46153846153846168; 5.40602696272799399;
	5.01524760194489794;
	5.00002317825394904; 5.00000000005372325; 5.; 5.; 5.]

2c
	let d = derivative (fun x -> x *. x) 4.0;;
	val d : float stream = <abstr>
	
	list 10 d;;
	- : float list =
	[9.; 8.5; 8.33333333333332504; 8.25; 8.20000000000000284;
	8.16666666666668561; 8.14285714285715656; 8.125;
	8.11111111111107519;8.09999999999998721]
	
	nth 400 d;;
	- : float = 8.00249376558566539
	
	nth 1000 d;;
	- : float = 8.00099900099941408
	
	list 10 (derivative (fun x -> x *. x +. 10.0) 4.0);;
	- : float list =
	[9.; 8.5; 8.33333333333332504; 8.25; 8.20000000000000284;
	8.16666666666668561; 8.14285714285715656; 8.125;
	8.11111111111107519;
	8.09999999999998721]
	
	list 10 (derivative (fun x -> 3.0 *. x) 4.0);;
	- : float list =
	[3.; 3.; 3.; 3.; 3.00000000000000711; 3.; 3.00000000000001421; 3.;
	2.99999999999998934; 2.99999999999998934]
	
	let d = derivative (fun x -> x *. x *. x +. x *. x +. 2.0 *. x)
	2.0;;
	val d : float stream = <abstr>
	
	list 10 d;;
	- : float list =
	[26.; 21.75; 20.4444444444444606; 19.8125; 19.4400000000000261;
	19.1944444444444144; 19.0204081632652766; 18.890625;
	18.7901234567901305;
	18.7100000000000222]
	
	nth 200 d;;
	- : float = 18.0348506225091967
	
	nth 300 d;;
	- : float = 18.0232668513604537
	
	nth 1000 d;;
	- : float = 18.0069940049968906
2d
	limit 100 0.5 (map float nats);;
	- : float option = None
	
	limit 100 1.5 (map float nats);;
	- : float option = Some 1.
	
	limit 1000 0.1 (map (fun n -> 1.0 /. (float (n+1))) nats);;
	- : float option = Some 0.25
	
	limit 1000 0.00000001 (pi ());;
	- : float option = Some 3.141592653623555
	
	limit 1000 0.00000001 (newton (fun x -> x *. x -. 10.0) (fun x ->
	2.0 *. x) 1.0);;
	- : float option = Some 3.16227766016837952
	
	limit 10000 0.00000001 (derivative (fun x -> x *. x) 4.0);;
	- : float option = Some 8.00010014021002291

3a
	list2 10 5 (table nats nats);;
	- : (int * int) list list =
	[[(0, 0); (0, 1); (0, 2); (0, 3); (0, 4)];
	[(1, 0); (1, 1); (1, 2); (1, 3); (1, 4)];
	[(2, 0); (2, 1); (2, 2); (2, 3); (2, 4)];
	[(3, 0); (3, 1); (3, 2); (3, 3); (3, 4)];
	[(4, 0); (4, 1); (4, 2); (4, 3); (4, 4)];
	[(5, 0); (5, 1); (5, 2); (5, 3); (5, 4)];
	[(6, 0); (6, 1); (6, 2); (6, 3); (6, 4)];
	[(7, 0); (7, 1); (7, 2); (7, 3); (7, 4)];
	[(8, 0); (8, 1); (8, 2); (8, 3); (8, 4)];
	[(9, 0); (9, 1); (9, 2); (9, 3); (9, 4)]]
	
	list2 10 5 (table nats squares);;
	- : (int * int) list list =
	[[(0, 0); (0, 1); (0, 4); (0, 9); (0, 16)];
	[(1, 0); (1, 1); (1, 4); (1, 9); (1, 16)];
	[(2, 0); (2, 1); (2, 4); (2, 9); (2, 16)];
	[(3, 0); (3, 1); (3, 4); (3, 9); (3, 16)];
	[(4, 0); (4, 1); (4, 4); (4, 9); (4, 16)];
	[(5, 0); (5, 1); (5, 4); (5, 9); (5, 16)];
	[(6, 0); (6, 1); (6, 4); (6, 9); (6, 16)];
	[(7, 0); (7, 1); (7, 4); (7, 9); (7, 16)];
	[(8, 0); (8, 1); (8, 4); (8, 9); (8, 16)];
	[(9, 0); (9, 1); (9, 4); (9, 9); (9, 16)]]
	
	list2 10 5 (table nats (map (fun x -> -x) nats));;
	- : (int * int) list list =
	[[(0, 0); (0, -1); (0, -2); (0, -3); (0, -4)];
	[(1, 0); (1, -1); (1, -2); (1, -3); (1, -4)];
	[(2, 0); (2, -1); (2, -2); (2, -3); (2, -4)];
	[(3, 0); (3, -1); (3, -2); (3, -3); (3, -4)];
	[(4, 0); (4, -1); (4, -2); (4, -3); (4, -4)];
	[(5, 0); (5, -1); (5, -2); (5, -3); (5, -4)];
	[(6, 0); (6, -1); (6, -2); (6, -3); (6, -4)];
	[(7, 0); (7, -1); (7, -2); (7, -3); (7, -4)];
	[(8, 0); (8, -1); (8, -2); (8, -3); (8, -4)];
	[(9, 0); (9, -1); (9, -2); (9, -3); (9, -4)]]

3b
	list2 10 5 (const nats);;
	- : int list list =
	13
	[[0; 1; 2; 3; 4]; [0; 1; 2; 3; 4]; [0; 1; 2; 3; 4]; [0; 1; 2; 3; 4];
	[0; 1; 2; 3; 4]; [0; 1; 2; 3; 4]; [0; 1; 2; 3; 4]; [0; 1; 2; 3; 4];
	[0; 1; 2; 3; 4]; [0; 1; 2; 3; 4]]
	
	list 10 (stripes (const nats));;
	- : int list list =
	[[0]; [1; 0]; [2; 1; 0]; [3; 2; 1; 0]; [4; 3; 2; 1; 0]; [5; 4; 3; 2;
	1; 0];
	[6; 5; 4; 3; 2; 1; 0]; [7; 6; 5; 4; 3; 2; 1; 0];
	[8; 7; 6; 5; 4; 3; 2; 1; 0]; [9; 8; 7; 6; 5; 4; 3; 2; 1; 0]]
	
	list2 10 5 (table nats nats);;
	- : (int * int) list list =
	[[(0, 0); (0, 1); (0, 2); (0, 3); (0, 4)];
	[(1, 0); (1, 1); (1, 2); (1, 3); (1, 4)];
	[(2, 0); (2, 1); (2, 2); (2, 3); (2, 4)];
	[(3, 0); (3, 1); (3, 2); (3, 3); (3, 4)];
	[(4, 0); (4, 1); (4, 2); (4, 3); (4, 4)];
	[(5, 0); (5, 1); (5, 2); (5, 3); (5, 4)];
	[(6, 0); (6, 1); (6, 2); (6, 3); (6, 4)];
	[(7, 0); (7, 1); (7, 2); (7, 3); (7, 4)];
	[(8, 0); (8, 1); (8, 2); (8, 3); (8, 4)];
	[(9, 0); (9, 1); (9, 2); (9, 3); (9, 4)]]
	
	list 10 (stripes (table nats nats));;
	- : (int * int) list list =
	[[(0, 0)]; [(0, 1); (1, 0)]; [(0, 2); (1, 1); (2, 0)];
	[(0, 3); (1, 2); (2, 1); (3, 0)]; [(0, 4); (1, 3); (2, 2); (3, 1);
	(4, 0)];
	[(0, 5); (1, 4); (2, 3); (3, 2); (4, 1); (5, 0)];
	[(0, 6); (1, 5); (2, 4); (3, 3); (4, 2); (5, 1); (6, 0)];
	[(0, 7); (1, 6); (2, 5); (3, 4); (4, 3); (5, 2); (6, 1); (7, 0)];
	[(0, 8); (1, 7); (2, 6); (3, 5); (4, 4); (5, 3); (6, 2); (7, 1); (8,
	0)];
	[(0, 9); (1, 8); (2, 7); (3, 6); (4, 5); (5, 4); (6, 3); (7, 2); (8,
	1);
	(9, 0)]]
	
	let rec tails s = fby s (fun () -> tails (tail s));;
	val tails : ’a stream -> ’a stream stream = <fun>
	
	list2 10 5 (tails nats);;
	- : int list list =
	[[0; 1; 2; 3; 4]; [1; 2; 3; 4; 5]; [2; 3; 4; 5; 6]; [3; 4; 5; 6; 7];
	[4; 5; 6; 7; 8]; [5; 6; 7; 8; 9]; [6; 7; 8; 9; 10]; [7; 8; 9; 10;
	11];
	[8; 9; 10; 11; 12]; [9; 10; 11; 12; 13]]
	
	list 10 (stripes (tails nats));;
	- : int list list =
	[[0]; [1; 1]; [2; 2; 2]; [3; 3; 3; 3]; [4; 4; 4; 4; 4]; [5; 5; 5; 5;
	5; 5];
	[6; 6; 6; 6; 6; 6; 6]; [7; 7; 7; 7; 7; 7; 7; 7];
	[8; 8; 8; 8; 8; 8; 8; 8; 8]; [9; 9; 9; 9; 9; 9; 9; 9; 9; 9]]

3c
	list 10 (const [1;2;3]);;
	- : int list list =
	[[1; 2; 3]; [1; 2; 3]; [1; 2; 3]; [1; 2; 3]; [1; 2; 3]; [1; 2; 3];
	[1; 2; 3];
	[1; 2; 3]; [1; 2; 3]; [1; 2; 3]]
	
	list 10 (flatten (const [1;2;3]));;
	- : int list = [1; 2; 3; 1; 2; 3; 1; 2; 3; 1]
	
	let rec cons0 l = fby l (fun () -> cons0 (0::l));;
	val cons0 : int list -> int list stream = <fun>
	
	list 10 (cons0 [1;2;3]);;
	- : int list list =
	[[1; 2; 3]; [0; 1; 2; 3]; [0; 0; 1; 2; 3]; [0; 0; 0; 1; 2; 3];
	[0; 0; 0; 0; 1; 2; 3]; [0; 0; 0; 0; 0; 1; 2; 3];
	[0; 0; 0; 0; 0; 0; 1; 2; 3]; [0; 0; 0; 0; 0; 0; 0; 1; 2; 3];
	[0; 0; 0; 0; 0; 0; 0; 0; 1; 2; 3]; [0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 2;
	3]]
	15
	
	list 10 (flatten (cons0 [1;2;3]));;
	- : int list = [1; 2; 3; 0; 1; 2; 3; 0; 0; 1]
	
	let rec mapadd l = fby l (fun () -> mapadd (match l with [x;y;z] ->
	[x+1;y+2;z+3] | _ -> []));;
	val mapadd : int list -> int list stream = <fun>
	
	list 10 (mapadd [1;2;3]);;
	- : int list list =
	[[1; 2; 3]; [2; 4; 6]; [3; 6; 9]; [4; 8; 12]; [5; 10; 15]; [6; 12;
	18];
	[7; 14; 21]; [8; 16; 24]; [9; 18; 27]; [10; 20; 30]]
	
	list 10 (flatten (mapadd [1;2;3]));;
	- : int list = [1; 2; 3; 2; 4; 6; 3; 6; 9; 4]
	
	list 10 (map (fun n -> List.map (fun x -> (n,x)) [1;2;3;4]) nats);;
	- : (int * int) list list =
	[[(0, 1); (0, 2); (0, 3); (0, 4)]; [(1, 1); (1, 2); (1, 3); (1, 4)];
	[(2, 1); (2, 2); (2, 3); (2, 4)]; [(3, 1); (3, 2); (3, 3); (3, 4)];
	[(4, 1); (4, 2); (4, 3); (4, 4)]; [(5, 1); (5, 2); (5, 3); (5, 4)];
	[(6, 1); (6, 2); (6, 3); (6, 4)]; [(7, 1); (7, 2); (7, 3); (7, 4)];
	[(8, 1); (8, 2); (8, 3); (8, 4)]; [(9, 1); (9, 2); (9, 3); (9, 4)]]
	
	list 10 (flatten (map (fun n -> List.map (fun x -> (n,x))
	[1;2;3;4]) nats));;
	- : (int * int) list =
	[(0, 1); (0, 2); (0, 3); (0, 4); (1, 1); (1, 2); (1, 3); (1, 4); (2,
	1);
	(2, 2)]

3d
	list 10 (pairs nats nats);;
	- : (int * int) list =
	[(0, 0); (0, 1); (1, 0); (0, 2); (1, 1); (2, 0); (0, 3); (1, 2); (2,
	1);
	(3, 0)]
	
	list 10 (pairs nats squares);;
	- : (int * int) list =
	[(0, 0); (0, 1); (1, 0); (0, 4); (1, 1); (2, 0); (0, 9); (1, 4); (2,
	1);
	(3, 0)]
	
	list 10 (pairs nats (map (fun x -> -x) nats));;
	- : (int * int) list =
	[(0, 0); (0, -1); (1, 0); (0, -2); (1, -1); (2, 0); (0, -3); (1, -2);
	(2, -1); (3, 0)]
	
	list 10 (pairs evens odds);;
	- : (int * int) list =
	[(0, 1); (0, 3); (2, 1); (0, 5); (2, 3); (4, 1); (0, 7); (2, 5); (4,
	3);
	(6, 1)]

